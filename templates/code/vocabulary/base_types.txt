# This file is auto-generated by setup.py


class TypesBase(object):
    
    def __init__(self, type_uri: str):
        if '/' in type_uri:
            self.base_uri, self.shortname = type_uri.rsplit('/', 1)
        else:
            self.base_uri = ""
            self.shortname = type_uri

    @classmethod
    def from_str(cls, string: str):
        if 'mmif.clams.ai' in string:
            if string.endswith('Document'):
                return DocumentTypesBase(string)
            else:
                return AnnotationTypesBase(string)
        else:
            return cls(string)
    
    def __hash__(self):
        return hash(str(self))
        
    def __eq__(self, other):
        if isinstance(other, str):
            other = self.from_str(other)
        return isinstance(other, TypesBase) and self.base_uri == other.base_uri and self.shortname == other.shortname
            
    def __repr__(self):
        if len(self.base_uri) > 0: 
            return f'{self.base_uri}/{self.shortname}'
        else:
            return self.shortname
    
    # aliases
    def __str__(self):
        return self.__repr__()
    
    def _serialize(self):
        return self.__repr__()


ThingTypesBase = TypesBase


class ClamsTypesBase(ThingTypesBase):
    
    def __init__(self, type_uri: str):
        if 'mmif.clams.ai' in type_uri:
            self.base_uri, self.version, _, self.shortname = type_uri.rsplit('/', 3)
        else:
            raise ValueError(f'{type_uri} is not a CLAMS vocabulary URI')

    def __hash__(self):
        return hash(str(self))

    def __eq__(self, other):
        if isinstance(other, str):
            other = ThingTypesBase.from_str(other)
        if isinstance(other, ClamsTypesBase):
            if '.' in self.version and '.' in other.version:
            # regular version 
                s_major, s_minor, s_patch = self.version.split('.')
                o_major, o_minor, o_patch = other.version.split('.')
                if s_major != o_major or s_minor != o_minor:
                    return False
            else:
                # dummy version given at development time
                if self.version != other.version:
                    return False
            return self.base_uri == other.base_uri and self.shortname == other.shortname
        else:
            return False
    
    def __repr__(self):
        return f'{self.base_uri}/{self.version}/vocabulary/{self.shortname}'


class AnnotationTypesBase(ClamsTypesBase):
    """
    Inherit from this class to build your own custom annotation
    vocabularies. Each member's name should be the name of the
    type, and each member's value should be the URI of that type.
    """
    ...


class DocumentTypesBase(ClamsTypesBase):
    """
    Inherit from this class to build your own custom document
    vocabularies. Each member's name should be the name of the
    type, and each member's value should be the URI of that type.
    """
    ...


class ThingType(ThingTypesBase):
    """
    This enum contains the URI for the MMIF Thing types defined in the spec version <VERSION>.
    Use this to quickly get the correct URI for this type, or use the object itself in your
    code and it will serialize to the string.
    """
